import type { NextPage, GetStaticProps } from "next";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { ChangeEvent, useEffect, useState } from "react";
import { ItemContextMenu } from "@components/ItemContextMenu";
import { Table } from "@components/Table";
import { BackButton } from "@components/buttons/BackButton";
import { HeaderedTable } from "@libs/tableUtils";
import { Tree } from "@libs/treeUtils";
import { Locale, useLocaleText } from "@services/i18n/i18n";
import { loadFullOutcomesTable, makeOutcomesTree } from "@services/outcomes";
import type { OutcomeInfo } from "@services/outcomes";
import { searchOutcomes, searchTables } from "@services/search";
import { getAllTables, loadTableInfoDict, TableInfoSet } from "@services/tables";

type PageProps = {
  outcomesTree: Tree<OutcomeInfo>;
  allTables: TableInfoSet[];
};

export const getStaticProps: GetStaticProps<PageProps> = async ({ locale }) => {
  const table = loadFullOutcomesTable(locale as Locale);
  const tableInfoDict = loadTableInfoDict(locale as Locale);
  const outcomesTree = makeOutcomesTree(table, tableInfoDict, locale as Locale);
  const allTables = getAllTables(locale as Locale);

  return {
    props: { outcomesTree, allTables },
  };
};

const Breadcrumb = ({ parents }: { parents: OutcomeInfo[] }) => {
  return (
    <>
      {parents.map((parent, i) => {
        return (
          <span className="text-xs text-gray-400" key={parent.id}>
            {i !== 0 ? ` / ` : ""}
            <span>
              {parent.index.slice(-2)}
              {parent.text}
            </span>
          </span>
        );
      })}
    </>
  );
};

const SearchBar = ({
  value,
  onChange,
}: {
  value: string;
  onChange: (e: ChangeEvent<HTMLInputElement>) => void;
}) => {
  const { t } = useLocaleText("@pages/search");
  return (
    <div className="sticky top-0 flex w-full items-center bg-white/80 backdrop-blur-sm">
      <div className="ml-2">
        <BackButton />
      </div>
      <input
        type="text"
        className="input-bordered input m-4 w-full max-w-xs"
        placeholder={t("placeholder")}
        value={value}
        onChange={e => onChange(e)}
      />
    </div>
  );
};

const SearchPage: NextPage<PageProps> = ({ outcomesTree, allTables }: PageProps) => {
  const router = useRouter();
  const { t } = useLocaleText("@pages/search");
  const [searchText, setSearchText] = useState("");
  useEffect(() => {
    const { q } = router.query;
    if (q) setSearchText(q as string);
  }, [router]);
  return (
    <>
      <Head>
        <title>Search Core curriculum outcomes</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="ml-4">
        <SearchBar value={searchText} onChange={e => setSearchText(e.target.value)} />
        <div>
          {searchOutcomes(outcomesTree, searchText).map(item => (
            <div className="m-4" key={item.id}>
              <div>
                <span className="mr-2 font-light text-sky-600">{item.index}</span>
                {item.text}
                <ItemContextMenu id={item.id} index={item.index} />
              </div>
              <Breadcrumb parents={item.parents} />
            </div>
          ))}
        </div>
        <div>
          {searchTables(searchText, allTables).map(({ table, tableInfo, attrInfo }) => {
            const title = `${t("table") + tableInfo.number}. ${tableInfo.item}`;

            return (
              <div key={tableInfo.id}>
                <div>
                  <Link href={tableInfo.link} passHref>
                    <div className="my-4">{title}</div>
                  </Link>
                  <Table {...{ table: table as HeaderedTable<string>, tableInfo, attrInfo }} />
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </>
  );
};

export default SearchPage;
